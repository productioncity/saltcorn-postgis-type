# -----------------------------------------------------------------------------
#  GitHub Actions  ·  Automated Yarn publication to GitHub Packages
#
#  • Trigger:        Release “published” event with tag `v<semver>` (e.g. v0.1.0)
#  • Tool‑chain:     Yarn (stable via Corepack) — mirrors the dev‑container setup
#  • Steps:
#       1. Validate tag & extract version
#       2. Bump package.json if needed, commit & push back
#       3. Yarn install (immutable) to guarantee a reproducible build
#       4. Publish to GitHub Packages only (`yarn npm publish`)
#
#  Notes:
#    – Works with Yarn 4 lockfile and PnP or node‑modules linker
#    – Requires no extra secrets; uses `GITHUB_TOKEN` for both push & publish.
# -----------------------------------------------------------------------------

name: Publish to GitHub Packages

on:
  release:
    types: [published]

permissions:
  contents: write    # version bump commit
  packages: write    # publish to the GH npm registry

jobs:
  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.event.release.tag_name, 'v')   # quick filter

    steps:
      # -----------------------------------------------------------------------
      # 1. Checkout full history (needed to push the version bump)
      # -----------------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # -----------------------------------------------------------------------
      # 2. Validate SEMVER tag and expose VERSION output
      # -----------------------------------------------------------------------
      - name: Validate tag
        id: semver
        run: |
          TAG="${{ github.event.release.tag_name }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error title=Invalid tag::$TAG is not a valid SEMVER tag (vX.Y.Z expected)"
            exit 1
          fi
          echo "VERSION=${TAG#v}" >> "$GITHUB_OUTPUT"

      # -----------------------------------------------------------------------
      # 3. Setup Node + Yarn (same as dev‑container)
      # -----------------------------------------------------------------------
      - name: Set up Node.js & Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com      # default for yarn npm
          cache: yarn                                   # caches .yarn/cache

      - name: Activate Yarn stable via Corepack
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn --version

      # -----------------------------------------------------------------------
      # 4. Sync package.json version with tag
      # -----------------------------------------------------------------------
      - name: Bump package.json (if required)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const file = 'package.json';
          const pkg  = JSON.parse(fs.readFileSync(file, 'utf8'));
          const version = process.env.VERSION;

          if (pkg.version === version) {
            console.log(`package.json already at ${version}`);
            process.exit(0);
          }

          pkg.version = version;
          fs.writeFileSync(file, JSON.stringify(pkg, null, 2) + '\n');
          console.log(`package.json updated → ${version}`);
          NODE
        env:
          VERSION: ${{ steps.semver.outputs.VERSION }}

      - name: Commit & push version bump
        run: |
          if git diff --quiet package.json; then
            echo "No change to commit."
            exit 0
          fi

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore(release): v${VERSION} [skip ci]"
          git push origin HEAD:${{ github.event.repository.default_branch }}
        env:
          VERSION: ${{ steps.semver.outputs.VERSION }}

      # -----------------------------------------------------------------------
      # 5. Install dependencies reproducibly (requires yarn.lock)
      # -----------------------------------------------------------------------
      - name: Yarn install (immutable)
        run: yarn install --immutable

      # -----------------------------------------------------------------------
      # 6. Publish to GitHub Packages (no npmjs publish)
      # -----------------------------------------------------------------------
      - name: Publish package
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN:     ${{ secrets.GITHUB_TOKEN }}
        run: |
          # --access public ensures visibility within the GH registry
          yarn npm publish --access public